Q1A)

activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:app="http://schemas.android.com/apk/res-auto"
	xmlns:tools="http://schemas.android.com/tools"
	android:layout_width="match_parent"
	android:layout_height="match_parent"
	tools:context=".MainActivity"
	android:background="@color/teal_200">

	<TextView
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:text="Armstrong Number or Not"
		android:textColor="@color/black"
		android:textSize="26sp"
		app:layout_constraintBottom_toTopOf="@+id/textView"
		app:layout_constraintEnd_toEndOf="parent"
		app:layout_constraintStart_toStartOf="parent"
		app:layout_constraintTop_toTopOf="parent"
		app:layout_constraintVertical_bias="0.491" />

	<TextView
		android:id="@+id/textView"
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:text="Enter a number to check Armstrong Number"
		android:textColor="@color/black"
		android:textSize="18sp"
		app:layout_constraintBottom_toBottomOf="parent"
		app:layout_constraintHorizontal_bias="0.494"
		app:layout_constraintLeft_toLeftOf="parent"
		app:layout_constraintRight_toRightOf="parent"
		app:layout_constraintTop_toTopOf="parent"
		app:layout_constraintVertical_bias="0.4" />

	<EditText
		android:id="@+id/etNum"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:layout_margin="10dp"
		android:hint="ENTER THE NUMBER"
		android:inputType="number"
		app:layout_constraintEnd_toEndOf="@+id/textView"
		app:layout_constraintStart_toStartOf="@+id/textView"
		app:layout_constraintTop_toBottomOf="@+id/textView" />

	<Button
		android:id="@+id/btnCheck"
		android:layout_width="149dp"
		android:layout_height="50dp"
		android:layout_margin="10dp"
		android:layout_marginTop="16dp"
		android:backgroundTint="@color/black"
		android:text="Check"
		android:textColor="@color/teal_700"
		app:layout_constraintBottom_toBottomOf="parent"
		app:layout_constraintEnd_toEndOf="@+id/etNum"
		app:layout_constraintHorizontal_bias="0.496"
		app:layout_constraintStart_toStartOf="@+id/etNum"
		app:layout_constraintTop_toBottomOf="@+id/etNum"
		app:layout_constraintVertical_bias="0.113" />

</androidx.constraintlayout.widget.ConstraintLayout>


MainActivity.kt
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import java.lang.Math.pow
import kotlin.math.pow

class MainActivity : AppCompatActivity() {
lateinit var btnCheck : Button
lateinit var etNum : EditText

	override fun onCreate(savedInstanceState: Bundle?) {
		super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_main)
		supportActionBar?.hide()
		
		// Binding the views
		btnCheck = findViewById(R.id.btnCheck)
		etNum = findViewById(R.id.etNum)

		btnCheck.setOnClickListener {
			val n = etNum.text.toString().length
			val num = etNum.text.toString().toInt()
			var temp = num
			var result = 0

			while (temp != 0){
				val remainder = temp % 10

				result += (remainder.toDouble().pow(n.toDouble())).toInt()

				temp /= 10
			}
			if (result == num)
				Toast.makeText(this,"Armstrong Number",Toast.LENGTH_SHORT).show()
			else
				Toast.makeText(this,"Not an Armstrong Number",Toast.LENGTH_SHORT).show()
		}
	}
}

Q2A)
#include<stdio.h>
#include<unistd.h>

int main() {
	int pipefds[2];
	int returnstatus;
	char writemessages[3][20]={"Hello World", "Hello SPPU","Linux is Funny"};
	char readmessage[20];
	returnstatus = pipe(pipefds);

	if (returnstatus == -1) {
	printf("Unable to create pipe\n");
	return 1;
	}
	int child = fork();
	if(child==0){
	printf("Child is Writing to pipe - Message 1 is %s\n", writemessages[0]);
	write(pipefds[1], writemessages[0], sizeof(writemessages[0]));
	printf("Child is Writing to pipe - Message 2 is %s\n", writemessages[1]);
	write(pipefds[1], writemessages[1], sizeof(writemessages[1]));
	printf("Child is Writing to pipe - Message 3 is %s\n", writemessages[2]);
	write(pipefds[1], writemessages[2], sizeof(writemessages[2]));
	}
	else
	{
	read(pipefds[0], readmessage, sizeof(readmessage));
	printf("Parent Process is Reading from pipe – Message 1 is %s\n", readmessage);
	read(pipefds[0], readmessage, sizeof(readmessage));
	printf("Parent Process is Reading from pipe – Message 2 is %s\n", readmessage);
	read(pipefds[0], readmessage, sizeof(readmessage));
	printf("Parent Process is Reading from pipe – Message 3 is %s\n", readmessage);
	}    	
}


Q2B)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
char *buff,*t1,*t2,*t3,*t4,ch;
FILE *fp;
int pid;
void search(char *t2,char *t3,char *t4)
{
	int i=1,count=0;
	char *p;
	if((fp=fopen(t4,"r"))==NULL)
	printf("File not found\n");
	else
	{
	if(strcmp(t2,"f")==0)
	{
	while(fgets(buff,80,fp))
	{
	if((strstr(buff,t3))!=NULL)
	{
	printf("%d: %s\n",i,buff);
	break;
	}
	}
	i++;
	}
	else if(strcmp(t2,"c")==0)
	{
	while(fgets(buff,80,fp))
	{
	if((strstr(buff,t3))!=NULL)
	{
	count++;

	}
		}
	printf("No of occurences of %s= %d\n",t3,count);
	}
	else if(strcmp(t2,"a")==0)
	{
	while(fgets(buff,80,fp))
	{
	if((strstr(buff,t3))!=NULL)
	{
	printf("%d: %s\n",i,buff);
	}
	i++;
	}
	}
	else
	printf("Command not found\n");

	fclose(fp);
	}
}
main()
{
	while(1)
	{
	printf("myshell$");
	fflush(stdin);
	t1=(char *)malloc(80);
	t2=(char *)malloc(80);
	t3=(char *)malloc(80);
	t4=(char *)malloc(80);
	buff=(char *)malloc(80);
	fgets(buff,80,stdin);   	
	sscanf(buff,"%s %s %s %s",t1,t2,t3,t4);
	if(strcmp(t1,"pause")==0)
	exit(0);
	else if(strcmp(t1,"search")==0)
	search(t2,t3,t4);
	else
	{
	pid=fork();
	if(pid<0)
	printf("Child process is not created\n");
	else if(pid==0)
	{          	
	execlp("/bin",NULL);
	if(strcmp(t1,"exit")==0)
	exit(0);
	system(buff);
	}
	else
	{          	
	wait(NULL);
	exit(0);
	}
	}
	}
}
