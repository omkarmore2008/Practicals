Q1A)
import Foundation
func string_a(_ input: String) -> String {
    var chars = input
    let index_start = chars.index(after: chars.startIndex)
    let index_end = chars.index(before: chars.endIndex)
    let middleRange = index_start ..< index_end
    
    var sub_string = chars.substring(with: middleRange)
    
    while sub_string.characters.contains("a") {
        sub_string.remove(at: sub_string.characters.index(of: "a")!)
    }
    
    chars.replaceSubrange(middleRange, with: sub_string)
    
    return String(chars)
}

print(string_a("abcd"))
print(string_a("abcda"))
print(string_a("aabcdaa"))
print(string_a("aabaaaacdaa"))


Q1B)
AndroidManifest.xml 
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:tools="http://schemas.android.com/tools"
	android:layout_width="match_parent"
	android:layout_height="match_parent"
	android:orientation="vertical"
	tools:context=".MainActivity">

	<!--Edit text to enter course name-->
	<EditText
		android:id="@+id/idEdtCourseName"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:layout_margin="10dp"
		android:hint="Enter course Name" />

	<!--edit text to enter course duration-->
	<EditText
		android:id="@+id/idEdtCourseDuration"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:layout_margin="10dp"
		android:hint="Enter Course Duration" />

	<!--edit text to display course tracks-->
	<EditText
		android:id="@+id/idEdtCourseTracks"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:layout_margin="10dp"
		android:hint="Enter Course Tracks" />

	<!--edit text for course description-->
	<EditText
		android:id="@+id/idEdtCourseDescription"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:layout_margin="10dp"
		android:hint="Enter Course Description" />

	<!--button for adding new course-->
	<Button
		android:id="@+id/idBtnAddCourse"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:layout_margin="10dp"
		android:text="Add Course"
		android:textAllCaps="false" />

</LinearLayout>

DBHandler.java
import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DBHandler extends SQLiteOpenHelper {

	// creating a constant variables for our database.
	// below variable is for our database name.
	private static final String DB_NAME = "coursedb";
	
	// below int is our database version
	private static final int DB_VERSION = 1;
	
	// below variable is for our table name.
	private static final String TABLE_NAME = "mycourses";
	
	// below variable is for our id column.
	private static final String ID_COL = "id";
	
	// below variable is for our course name column
	private static final String NAME_COL = "name";
	
	// below variable id for our course duration column.
	private static final String DURATION_COL = "duration";
	
	// below variable for our course description column.
	private static final String DESCRIPTION_COL = "description";
	
	// below variable is for our course tracks column.
	private static final String TRACKS_COL = "tracks";

	// creating a constructor for our database handler.
	public DBHandler(Context context) {
		super(context, DB_NAME, null, DB_VERSION);
	}

	// below method is for creating a database by running a sqlite query
	@Override
	public void onCreate(SQLiteDatabase db) {
		// on below line we are creating
		// an sqlite query and we are
		// setting our column names
		// along with their data types.
		String query = "CREATE TABLE " + TABLE_NAME + " ("
				+ ID_COL + " INTEGER PRIMARY KEY AUTOINCREMENT, "
				+ NAME_COL + " TEXT,"
				+ DURATION_COL + " TEXT,"
				+ DESCRIPTION_COL + " TEXT,"
				+ TRACKS_COL + " TEXT)";

		// at last we are calling a exec sql
		// method to execute above sql query
		db.execSQL(query);
	}

	// this method is use to add new course to our sqlite database.
	public void addNewCourse(String courseName, String courseDuration, String courseDescription, String courseTracks) {
		
		// on below line we are creating a variable for
		// our sqlite database and calling writable method
		// as we are writing data in our database.
		SQLiteDatabase db = this.getWritableDatabase();
		
		// on below line we are creating a
		// variable for content values.
		ContentValues values = new ContentValues();
		
		// on below line we are passing all values
		// along with its key and value pair.
		values.put(NAME_COL, courseName);
		values.put(DURATION_COL, courseDuration);
		values.put(DESCRIPTION_COL, courseDescription);
		values.put(TRACKS_COL, courseTracks);
		
		// after adding all values we are passing
		// content values to our table.
		db.insert(TABLE_NAME, null, values);
		
		// at last we are closing our
		// database after adding database.
		db.close();
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// this method is called to check if the table exists already.
		db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
		onCreate(db);
	}
}


Q2A)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
  // Open the file for writing.
  int fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0666);

  // Duplicate the file descriptor to stdout.
  dup2(fd, 1);

  // Close the file descriptor.
  close(fd);

  // Print a message to stdout.
  printf("This will be printed to output.txt\n");

  // Return 0 to indicate success.
  return 0;
}


Q2B)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_ARGUMENTS 10
#define MAX_LINE_LENGTH 1024

void executeCommand(char *command, char *arguments[]) {
    pid_t pid = fork();

    if (pid < 0) {
        printf("Error: Fork failed.\n");
        exit(1);
    } else if (pid == 0) {
        // Child process
        execvp(command, arguments);
        printf("Error: Command execution failed.\n");
        exit(1);
    } else {
        // Parent process
        wait(NULL);
    }
}

void printLinesFromFile(char *filename, int start, int end) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error: Unable to open file '%s'.\n", filename);
        return;
    }

    char line[MAX_LINE_LENGTH];
    int lineNumber = 1;

    while (fgets(line, MAX_LINE_LENGTH, file) != NULL && lineNumber <= end) {
        if (lineNumber >= start) {
            printf("%s", line);
        }
        lineNumber++;
    }

    fclose(file);
}

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *arguments[MAX_ARGUMENTS];

    while (1) {
        printf("NewShell$ ");
        fgets(command, MAX_COMMAND_LENGTH, stdin);
        command[strcspn(command, "\n")] = '\0';  // Remove the trailing newline character

        // Split the command into arguments
        int numArguments = 0;
        char *token = strtok(command, " ");
        while (token != NULL && numArguments < MAX_ARGUMENTS) {
            arguments[numArguments] = token;
            numArguments++;
            token = strtok(NULL, " ");
        }
        arguments[numArguments] = NULL;

        if (strcmp(arguments[0], "typeline") == 0) {
            if (numArguments == 4 && strcmp(arguments[1], "+10") == 0) {
                int linesToPrint = atoi(arguments[2]);
                printLinesFromFile(arguments[3], 1, linesToPrint);
            } else if (numArguments == 4 && strcmp(arguments[1], "-20") == 0) {
                int linesToPrint = atoi(arguments[2]);
                printLinesFromFile(arguments[3], -linesToPrint, 0);
            } else if (numArguments == 3 && strcmp(arguments[1], "a") == 0) {
                printLinesFromFile(arguments[2], 1, INT_MAX);
            } else {
                printf("Error: Invalid typeline command.\n");
            }
        } else {
            executeCommand(arguments[0], arguments);
        }
    }

    return 0;
}
