Q1 A)

func triple_sum(a: Int, b: Int) -> Int {
    if a == b 
     {
        return (a + b) * 3
     }
     else 
     {
        return a + b
     }
 }

 print(triple_sum(a: 1, b: 2))   
print(triple_sum(a: 3, b: 2)) 
print(triple_sum(a: 2, b: 2))

Q1B)
package com.droidacid.apticalc.aptitudes;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.droidacid.apticalc.R;

public class AptiFactorial extends Activity implements android.view.View.OnClickListener{
EditText number;
TextView answer;
Button calculate;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.apti_factorial);
    initialize();
}

private void initialize() {
    number = (EditText) findViewById(R.id.et_apti_number);
    number.setHint("Enter number to be factorialized :P")
    answer = (TextView) findViewById(R.id.tv_apti_answer);
    calculate = (Button) findViewById(R.id.b_apti_calc);
    calculate.setOnClickListener(this);
}

private long calcFactorial() {

    long factorial = 1;
    try {
        factorial = Long.parseLong(number.getText().toString());
        for(int i=factorial-1; i>0; i--){
            factorial = i * factorial;
        }
    } catch (NumberFormatException e) {
        Toast.makeText(this, "Incorrect Input", Toast.LENGTH_LONG).show();
    } finally {}

    return factorial;
}

@Override
public void onClick(View v) {
    answer.setText("Factorial of " + number.getText().toString() + " is : " + calcFactorial());
}

Q2A)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure of type student
struct student {
int stud_id;
int name_len;
int struct_size;
char stud_name[0];
    // variable length array must be
    // last.
};

// Memory allocation and initialisation of structure
struct student* createStudent(struct student* s, int id,
char a[])
{
    s = alloca(sizeof(*s) + sizeof(char) * strlen(a));

s->stud_id = id;
s->name_len = strlen(a);
strcpy(s->stud_name, a);

s->struct_size
        = (sizeof(*s)
           + sizeof(char) * strlen(s->stud_name));

return s;
}

// Print student details
void printStudent(struct student* s)
{
printf("Student_id : %d\n"
           "Stud_Name : %s\n"
           "Name_Length: %d\n"
           "Allocated_Struct_size: %d\n\n",
s->stud_id, s->stud_name, s->name_len,
s->struct_size);

    // Value of Allocated_Struct_size here is in bytes.
}

// Driver Code
int main()
{
struct student *s1, *s2;

    s1 = createStudent(s1, 523, "Sanjayulsha");
    s2 = createStudent(s2, 535, "Cherry");

printStudent(s1);
printStudent(s2);

    // size in bytes
printf("Size of Struct student: %lu\n",
sizeof(struct student));
    // size in bytes
printf("Size of Struct pointer: %lu", sizeof(s1));

return 0;
}


Q2B)
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
char *buff,*t1,*t2,*t3,ch;
FILE *fp;
int pid;
void count(char *t2,char *t3)
{
int charcount=0,wordcount=0,linecount=0;
if((fp=fopen(t3,"r"))==NULL)
	printf("File not found");
else
  {
	while((ch=fgetc(fp))!=EOF)
	{
	if(ch==' ')
	wordcount++;
	else if(ch=='\n')
	{
	linecount++;
	wordcount++;
	
	}
	else
	charcount++;
	}

fclose(fp);
if(strcmp(t2,"c")==0)
	printf("The total no. of characters :%d\n",charcount);
else if(strcmp(t2,"w")==0)
printf("The total no. of words :%d\n",wordcount);
else if(strcmp(t2,"l")==0)
printf("The total no. of lines :%d\n",linecount);
else
	printf("Command not found");
 }

}
main()
{
while(1)
   {
	printf("myshell$");
	fflush(stdin);
	t1=(char *)malloc(80);
	t2=(char *)malloc(80);
	t3=(char *)malloc(80);

	buff=(char *)malloc(80);
	fgets(buff,80,stdin);   	
	sscanf(buff,"%s %s %s",t1,t2,t3);
	if(strcmp(t1,"pause")==0)
	exit(0);
	else if(strcmp(t1,"count")==0)
	count(t2,t3);
	else
	{
	pid=fork();
	if(pid<0)
	printf("Child process is not created\n");
	else if(pid==0)
	{          	
	execlp("/bin",NULL);
	if(strcmp(t1,"exit")==0)
	exit(0);
	system(buff);
	}
	else
	{          	
	wait(NULL);
	exit(0);
	}
	}
    }
}
