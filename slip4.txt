Q1A
QCreate a Simple Android Application Which Send ―Helloǁ message from one activity
to another with help of Button (Use Intent).
Activity.java :
package com.example.slip4_1;
import androidx.appcompat.app.AppCompatActivity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
public class MainActivity extends AppCompatActivity {
private Button helloButton;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
helloButton = findViewById(R.id.hello_button);
helloButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Create an intent to start the ResultActivity
Intent intent = new Intent(MainActivity.this,
ResultActivity.class);
// Add the "Hello" message as an extra to the intent
intent.putExtra("message", "Hello");
// Start the ResultActivity
startActivity(intent);
}
});
}
}
Result.java :
package com.example.slip4_1;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.TextView;
public class ResultActivity extends AppCompatActivity {
private TextView helloTextView;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_result);
helloTextView = findViewById(R.id.hello_textview);
// Get the "Hello" message from the intent's extras
String message = getIntent().getStringExtra("message");
// Set the "Hello" message in the text view
helloTextView.setText(message);
}
}
Activity.xml :
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools">
<application
android:allowBackup="true"
android:dataExtractionRules="@xml/data_extraction_rules"
android:fullBackupContent="@xml/backup_rules"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:supportsRtl="true"
android:theme="@style/Theme.Slip4_1"
tools:targetApi="31">
<activity
android:name=".ResultActivity"
android:exported="false" />
<activity
android:name=".MainActivity"
android:exported="true">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>



Q1B

import UIKit

class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
@IBOutlet weak var tableView: UITableView!

var items = ["Item 1", "Item 2", "Item 3"]

override func viewDidLoad() {
    super.viewDidLoad()

    tableView.dataSource = self
    tableView.delegate = self
}

func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return items.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! UITableViewCell

    cell.textLabel?.text = items[indexPath.row]

    return cell
}

func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    let selected = items[indexPath.row]

    // Go to the second view and display the selected item
    let secondViewController = SecondViewController()
    secondViewController.item = selected

    navigationController?.pushViewController(secondViewController, animated: true)
}
}
class SecondViewController: UIViewController {
@IBOutlet weak var label: UILabel!

var item: String?

override func viewDidLoad() {
    super.viewDidLoad()

    label.text = item
}
}






Q2A

#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>

int main(int argc, char **argv)
{
	if(argc != 2)	
	return 1;

	int file=0;
	if((file=open(argv[1],O_RDONLY)) < -1)
	return 1;

	struct stat fileStat;
	if(fstat(file,&fileStat) < 0)	
	return 1;

	printf("Information for %s\n",argv[1]);
	printf("---------------------------\n");
	printf("File Size: \t\t%d bytes\n",fileStat.st_size);
	printf("Number of Hard Links: \t%d\n",fileStat.st_nlink);
	printf("File inode: \t\t%d\n",fileStat.st_ino);

	//printf("Last file access:     	%s", ctime(&fileStat.st_atime));
	//printf("Last file modification:   %s", ctime(&fileStat.st_mtime));

	printf("File Permissions: \t");
	printf( (S_ISDIR(fileStat.st_mode)) ? "d" : "-");
	printf( (fileStat.st_mode & S_IRUSR) ? "r" : "-");
	printf( (fileStat.st_mode & S_IWUSR) ? "w" : "-");
	printf( (fileStat.st_mode & S_IXUSR) ? "x" : "-");
	printf( (fileStat.st_mode & S_IRGRP) ? "r" : "-");
	printf( (fileStat.st_mode & S_IWGRP) ? "w" : "-");
	printf( (fileStat.st_mode & S_IXGRP) ? "x" : "-");
	printf( (fileStat.st_mode & S_IROTH) ? "r" : "-");
	printf( (fileStat.st_mode & S_IWOTH) ? "w" : "-");
	printf( (fileStat.st_mode & S_IXOTH) ? "x" : "-");
	printf("\n");
	close(file);
	return 0;

}

Q2B

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

int main() {
  // Block the SIGINT and SIGQUIT signals.
  signal(SIGINT, SIG_IGN);
  signal(SIGQUIT, SIG_IGN);

  // Create a pipe.
  int pipefd[2];
  pipe(pipefd);

  // Fork a child process.
  pid_t pid = fork();
  if (pid == 0) {
    // Close the write end of the pipe.
    close(pipefd[1]);

    // Redirect the child's stdout to the read end of the pipe.
    dup2(pipefd[0], 1);

    // Execute the `ls` command.
    execlp("ls", "ls", "-l", NULL);
  } else {
    // Close the read end of the pipe.
    close(pipefd[0]);

    // Redirect the parent's stdin to the write end of the pipe.
    dup2(pipefd[1], 0);

    // Execute the `wc` command.
    execlp("wc", "wc", "-l", NULL);
  }

  // Wait for the child process to finish.
  waitpid(pid, NULL, 0);

  // Return 0.
  return 0;
}